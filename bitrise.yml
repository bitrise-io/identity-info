format_version: "3"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ""
app:
  envs:
  - SERVICE_NAME: cert-info
  - GO_VERSION: 1.14.1
  - PORT: 3000

workflows:
  deploy:
    steps:
      - script:
          title: Setup GCLOUD SDK
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                ./tooling/setup_gcloud_cli.sh
      - script:
          title: Build container
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                docker build . -t $IMAGE_ID
                docker push $IMAGE_ID
      - script:
          title: Deploy service to Google cloud
          inputs:
            - content: |
                #!/bin/bash
                set -ex
                gcloud run deploy $SERVICE_NAME --image $IMAGE_ID --platform managed --region us-central1

  ci:
    after_run:
      - test
    steps:
    - script:
        title: Update go
        inputs:
        - content: |
            #!/bin/bash
            ./scripts/update_go.sh
    - script:
        title: Install dependencies
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go get github.com/kisielk/errcheck
            go get -u golang.org/x/lint/golint

  test:
    envs:
    - TEST_PROFILE_PATH: $TEST_PROFILE_PATH
    - TEST_NO_PW_CERTIFICATE_PATH: $TEST_NO_PW_CERTIFICATE_PATH
    - TEST_CERTIFICATE_PATH: $TEST_CERTIFICATE_PATH
    - TEST_CERTIFICATE_PASSWORD: $TEST_CERTIFICATE_PASSWORD
    - TEST_PROFILE_URL: $TEST_PROFILE_URL
    - TEST_CERTIFICATE_URL: $TEST_CERTIFICATE_URL
    - TEST_CERTIFICATE_URL_PASSWORD: $TEST_CERTIFICATE_URL_PASSWORD
    steps:
    - script:
        title: Unit tests
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go test -v -cover -race -coverprofile=coverage.txt -covermode=atomic ./...
    - script:
        title: Linting
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            GOLIST_WITHOUT_VENDOR="$(go list ./... | grep -v vendor)"
            go vet $GOLIST_WITHOUT_VENDOR
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR

            # lint
            while read -r line; do
              echo "-> Linting: $line"
              golint -set_exit_status $line
            done <<< "$GOLIST_WITHOUT_VENDOR"
  up:
    steps:
    - script:
        title: Start server
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go run main.go
